import numpy as np
import math
import matplotlib.pyplot as plt
from scipy import integrate, optimize
import scipy.special as sp

class Prediction:
    def __init__(self, c, g):
        if not c:

            ydata = ['1e-06', '1.49920166169172e-06', '2.24595472686361e-06', '3.36377954575331e-06', '5.03793663882291e-06', '7.54533628058909e-06', '1.13006564683911e-05', '1.69249500601052e-05', '2.53483161761933e-05', '3.79636391699325e-05', '5.68567547875179e-05', '8.51509649182741e-05', '0.000127522555808945', '0.000189928392105942', '0.000283447055673738', '0.000423064043409294', '0.000631295993246634', '0.000941024110897193', '0.00140281896645859', '0.00209085569326554', '0.00311449589149717', '0.00463557784224762', '0.00689146863803467', '0.010227347567051', '0.0151380084180746', '0.0223233100045688', '0.0327384810150231', '0.0476330618585758', '0.0685260046667727', '0.0970432959143974', '0.134525888779423', '0.181363340075877', '0.236189247803334', '0.295374180276257', '0.353377036130714', '0.404138746080267', '0.442876028839178', '0.467273954573897', '0.477529937494976', '0.475582401936257', '0.464137179474659', '0.445930281787152', '0.423331710456602', '0.39821360956389', '0.371967226561944', '0.345577884704341', '0.319716449520481', '0.294819942458255', '0.271156813453547', '0.24887641905719', '0.228045466022105', '0.208674420183194', '0.190736203926912', '0.174179448652951', '0.158937806544529', '0.144936441326754', '0.132096533873646', '0.120338367115739', '0.10958340819268', '0.099755679236243', '0.0907826241267504', '0.0825956203546979', '0.0751302384111894', '0.0683263295744258', '0.0621279977639921', '0.0564834809370572', '0.0513449852139111', '0.0466684871328814', '0.042413516167789', '0.0385429293775096', '0.035022685071934', '0.0318216204865132', '0.0289112368382048', '0.0262654939162707', '0.0238606155312519', '0.021674906523588', '0.0196885815912485', '0.0178836058829335', '0.0162435470852779', '0.0147534385851646', '0.0133996531928511', '0.0121697868544064', '0.0110525517526551', '0.0100376781867076', '0.00911582462544914', '0.00827849534575178', '0.00751796508841916', '0.00682721019158058', '0.00619984569061827', '0.00563006790443123', '0.00511260205894446', '0.00464265452957236', '0.00421586931435123', '0.00382828837833139', '0.00347631553734708', '0.00315668357532714', '0.00286642431380459', '0.00260284137520731', '0.00236348540287827', '0.00214613152062159', '0.00194875883295343']
            ydata  = [0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.02138808683563255, 0.0427761736712651, 0.0427761736712651, 0.0427761736712651, 0.0427761736712651, 0.0427761736712651, 0.0427761736712651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0855523473425302, 0.23526895519195806, 0.2780451288632232, 0.6416426050689765, 0.9196877339321997, 1.7538231205218693, 2.5237942466046412, 3.4862581542081057, 4.705379103839161, 5.496738316757566, 8.512458560581756, 10.0524008127473, 13.752539835311731, 22.264998395893485, 35.56838840765693, 44.78665383381456, 44.78665383381456, 107.77456956475243, 125.6336220725056, 155.7266602502406, 201.30467329697356, 229.28029087798095, 274.38776601433, 360.5175917014223, 402.56657042027587, 497.2516308416212, 560.2181584857234, 696.4174954550315, 771.9174419848144, 944.2412576195059, 1085.8945567319004, 1205.4753502299218, 1303.603892631804, 1398.8022671372046, 1522.3184686129825, 1639.6962891669339, 1742.5088225858196, 1824.8743449898407, 1896.8238691049085, 1966.6131964495776, 2001.1977328627954, 2058.3467008876055, 2111.7313656293445, 2143.064912843546, 2161.415891348519, 2194.5246497700778, 2222.6072077852637, 2233.7717891134635, 2253.705486044273, 2246.540476954336, 2284.0551812640356, 2355.919153031761, 2481.9163725804724, 2500.887605603679, 2594.7385306384344, 2558.507111538873, 2602.1601967703987, 2619.4845471072613, 2647.2890599935836, 2580.8790503689443, 2509.1647952090684, 2452.186931878943, 2398.652550529355, 2362.8702812533415, 2226.007913592129, 2168.431183830606, 2168.431183830606, 2124.564217730724]
            ydata = [0.20738282870178348, 0.20738282870178348, 0.20738282870178348, 0.20738282870178348, 0.20738282870178348, 0.6221484861053505, 0.6221484861053505, 0.8295313148071339, 1.0369141435089175, 1.0369141435089175, 1.0369141435089175, 1.0369141435089175, 1.0369141435089175, 1.0369141435089175, 1.0369141435089175, 1.244296972210701, 1.6590626296142679, 1.6590626296142679, 2.488593944421402, 4.14765657403567, 5.806719203649938, 8.087930319369557, 10.783907092492742, 21.153048527581916, 21.153048527581916, 29.655744504355038, 37.95105765242638, 53.09000414765657, 68.64371630029034, 83.16051430941518, 94.98133554541684, 109.08336789713812, 118.83036084612193, 129.6142679386147, 146.20489423475735, 158.64786395686437, 170.6760680215678, 183.11903774367482, 192.86603069265865, 190.58481957693903, 192.4512650352551, 191.20696806304437, 188.718374118623, 184.5707175445873, 178.14184985483203, 166.52841144753214, 153.0485275819162, 136.45790128577354, 130.85856491082538, 122.97801742015761, 115.09746992948983, 107.63168809622563, 96.64039817503111, 91.04106180008296, 86.06387391124015, 74.86520116134383, 71.13231024471173, 68.02156781418499, 60.14102032351721, 53.50476980506014, 50.80879303193696, 48.73496474491912, 47.07590211530485, 46.03898797179593, 45.83160514309415]


            xdata = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101']
            ydata = ydata[:40]
            xdata = xdata[:40]
            self.ydata = np.array(ydata, dtype=float)
            self.xdata = np.array(xdata, dtype=float)
            self.N = 1.0
            self.I0 = self.ydata[0]
            self.S0 = self.N - self.I0
            self.R0 = 0.0
        else:
            for i in range(0,len(c.dates)):
                if c.cases[i]> 0:
                    startdate = c.dates[i]
                    startdate_i = i
                    i_0 = c.cases[i]
                    break

            if "new" in g:
                newydata = []
                orig_len= len(c.x)
                if "death" in g:
                    sumc = sum(c.deaths)
                    metric= c.newdeathsPerM
                else:
                    sumc = sum(c.cases)
                    metric= c.newcasesPerM
                for d in range(0,orig_len):
                    newydata.append(metric[d]/sumc)
                self.ydata = np.array(newydata, dtype=float)
                self.xdata = np.array(c.x, dtype=float)
                popt, pcov = optimize.curve_fit(self.skewnor, self.xdata, self.ydata, p0=(1./np.std(self.ydata), np.argmax(self.ydata) ,0,0,2))
                self.newxdata = range(0,orig_len+150)
                self.fitted = self.skewnor(self.newxdata, *popt)

                # print(self.fitted)
                toprange = len(self.newxdata)

                for i in range(0,150):
                    if self.fitted[orig_len+i]*sumc < 1 or  (i >  30 and self.fitted[orig_len+i]/self.fitted[orig_len+i-1] > 0.99):
                        toprange = i
                        break

                print("TOPRANGE",toprange)
                self.newxdata = range(0,orig_len+toprange)
            else:
                self.N = c.pop
                print("POPULATION", self.N)

                self.I0 = i_0/c.pop
                self.S0 = self.N - self.I0
                self.R0 = 0.0
                xdata = [x for x in range(0,len(c.dates)-startdate_i)]
                if len(c.allrecovered) > 1:
                    ydata = [a -b for a,b in zip(c.cases,c.allrecovered)][startdate_i:]
                else:
                    ydata = c.newcases[startdate_i:]
                ydata = [y/c.pop for y in ydata]
                print("XXX",xdata)
                print("YYY",ydata)
                self.ydata = np.array(ydata, dtype=float)
                self.xdata = np.array(xdata, dtype=float)

                popt, pcov = optimize.curve_fit(self.fit_odeint, self.xdata, self.ydata)
                # popt, pcov = optimize.curve_fit(, self.xdata, self.ydata)
                self.fitted = self.fit_odeint(self.xdata, *popt)
                # return self





    def sir_model(self,y, x, beta, gamma):
        S = -beta * y[0] * y[1] / self.N
        R = gamma * y[1]

        try:
            I = -(S + R)
        except RuntimeWarning:
            print("S", S, "R", R)
            I = -(S + R)
        return S, I, R

    def fit_odeint(self,x, beta, gamma):
        return integrate.odeint(self.sir_model, (self.S0, self.I0, self.R0), x, args=(beta, gamma))[:,1]

    def skewnor(self,x, sigmag, mu, alpha, c,a):
        #normal distribution
        normpdf = (1/(sigmag*np.sqrt(2*math.pi)))*np.exp(-(np.power((x-mu),2)/(2*np.power(sigmag,2))))
        normcdf = (0.5*(1+sp.erf((alpha*((x-mu)/sigmag))/(np.sqrt(2)))))
        return 2*a*normpdf*normcdf + c

# N = 1.0
# I0 = ydata[0]
# S0 = N - I0
# R0 = 0.0
#
# popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)
# fitted = fit_odeint(xdata, *popt)
#
# plt.plot(xdata, ydata, 'o')
# plt.plot(xdata, fitted)
# plt.show()
